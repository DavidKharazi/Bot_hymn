from dotenv import load_dotenv
import logging
import os
import google.generativeai as genai
from docx import Document
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import difflib

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω –∏–∑ DOCX —Ñ–∞–π–ª–æ–≤
def read_songs(folder_path):
    songs = {}
    for filename in os.listdir(folder_path):
        if filename.endswith('.docx'):
            file_path = os.path.join(folder_path, filename)
            doc = Document(file_path)
            full_text = '\n'.join([paragraph.text for paragraph in doc.paragraphs])
            songs[filename[:-5]] = full_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    return dict(sorted(songs.items()))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á–∞–º (–Ω–∞–∑–≤–∞–Ω–∏—è–º –ø–µ—Å–µ–Ω)


def read_chord_files(folder_path):
    chords = {}
    song_titles = set(SONGS.keys())  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–µ–Ω –∏–∑ SONGS

    for filename in os.listdir(folder_path):
        if filename.endswith('.pdf'):
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –ª—é–±—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            clean_filename = ''.join(c for c in filename[:-4] if c.isalnum() or c.isspace()).lower()

            # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
            best_match = difflib.get_close_matches(clean_filename, song_titles, n=1, cutoff=0.6)

            if best_match:
                song_title = best_match[0]
                chords[song_title] = os.path.join(folder_path, filename)
            else:
                # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                chords[filename[:-4]] = os.path.join(folder_path, filename)

    return dict(sorted(chords.items()))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Å–µ–Ω –∏ –∞–∫–∫–æ—Ä–¥–æ–≤
SONGS = read_songs('songs')
CHORDS = read_chord_files('chords')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–µ—Å–Ω—è—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini
async def search_with_gemini(query):
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Å–Ω—è—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        songs_data = []
        for title, lyrics in SONGS.items():
            songs_data.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:\n{lyrics}\n---")

        songs_corpus = "\n".join(songs_data)

        prompt = f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ—Ä–∫–æ–≤–Ω—ã—Ö –ø–µ—Å–µ–Ω.

        –í–æ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{query}"
        
        –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –ø–µ—Å–Ω–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
        
        {songs_corpus}

        –ù–∞–π–¥–∏ –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ:
        1. –ù–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏
        2. –°–ª–æ–≤–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
        3. –¢–µ–º–µ –∏–ª–∏ —Å–º—ã—Å–ª—É –ø–µ—Å–Ω–∏
        4. –ë–∏–±–ª–µ–π—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        1. –ü–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        2. –î–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Å–Ω–∏ —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–∞ –ø–µ—Å–Ω—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É
        3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Å–µ–Ω, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏
        4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏ —ç–º–æ–¥–∑–∏.
        
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."""

        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini API: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–µ–Ω
def create_alphabet_keyboard():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Å–µ–Ω
    available_letters = sorted(set(title[0].upper() for title in SONGS.keys() if title[0].isalpha()))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º–∏ –±—É–∫–≤–∞–º–∏
    keyboard = []
    row = []
    for letter in available_letters:
        row.append(InlineKeyboardButton(letter, callback_data=f"letter_{letter}"))
        if len(row) == 4:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–µ—Å–Ω—è–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
def create_songs_keyboard(letter):
    keyboard = []
    for title in sorted(SONGS.keys()):
        if title.upper().startswith(letter):
            keyboard.append([InlineKeyboardButton(title, callback_data=f"song_{title}")])
    return InlineKeyboardMarkup(keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Executing /start command")
    context.user_data['gemini_mode'] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Gemini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    keyboard = ReplyKeyboardMarkup([
        ['üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É'],
        ['üéµ –í—Å–µ –ø–µ—Å–Ω–∏']
    ], resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏:', reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Executing /menu command")
    keyboard = create_alphabet_keyboard()
    message = update.message if update.message else update.callback_query.message
    await message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:', reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Å–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ï—â–µ" –∏ "–ù–∞–∑–∞–¥"
async def all_songs(update_or_message, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("Executing /all_songs command")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    songs_per_page = 10

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
    all_songs_list = sorted(SONGS.keys())

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 0 –ø—Ä–∏ –Ω–æ–≤–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
    context.user_data['current_song_index'] = 0
    context.user_data['previous_song_index'] = None  # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ

    # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    current_index = context.user_data.get('current_song_index', 0)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
    next_index = current_index + songs_per_page
    songs_to_show = all_songs_list[current_index:next_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω
    keyboard_inline = [[InlineKeyboardButton(title, callback_data=f"song_{title}")] for title in songs_to_show]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ï—â–µ" –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    navigation_buttons = []
    if current_index > 0:
        navigation_buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="show_previous_songs"))
    if next_index < len(all_songs_list):
        navigation_buttons.append(InlineKeyboardButton("–ï—â–µ", callback_data="show_more_songs"))

    if navigation_buttons:
        keyboard_inline.append(navigation_buttons)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(update_or_message, 'message'):
        message = update_or_message.message
    else:
        message = update_or_message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–Ω—è–º–∏
    await message.reply_text('–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω:', reply_markup=InlineKeyboardMarkup(keyboard_inline))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['previous_song_index'] = current_index  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ ‚Äî —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    context.user_data['current_song_index'] = next_index  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–ø—Ä–µ–∂–Ω–∏–π –º–µ—Ç–æ–¥)
async def find_song_manually(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str) -> None:
    logger.info(f"–ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤—Ä—É—á–Ω—É—é: {user_input}")
    found_songs = []

    for title, lyrics in SONGS.items():
        if user_input.lower() in title.lower() or user_input.lower() in lyrics.lower():
            found_songs.append((title, lyrics))

    if found_songs:
        for title, lyrics in found_songs:
            await update.message.reply_text(lyrics)
            try:
                await update.message.reply_document(document=open(f'songs/{title}.docx', 'rb'))
            except FileNotFoundError:
                await update.message.reply_text(f"–§–∞–π–ª {title}.docx –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üé∏ –ê–∫–∫–æ—Ä–¥—ã", callback_data=f"chords_{title}")],
                [InlineKeyboardButton("üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="menu")],
                [InlineKeyboardButton("üéµ –í—Å–µ –ø–µ—Å–Ω–∏", callback_data="all_songs")]
            ])
            await update.message.reply_text("–ñ–º–∏üëá:", reply_markup=keyboard)
    else:
        await update.message.reply_text('–ü–µ—Å–Ω–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ Gemini
async def toggle_gemini_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_mode = context.user_data.get('gemini_mode', True)
    new_mode = not current_mode
    context.user_data['gemini_mode'] = new_mode

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    mode_text = "–í–ö–õ" if new_mode else "–í–´–ö–õ"
    keyboard = ReplyKeyboardMarkup([
        ['üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É'],
        ['üéµ –í—Å–µ –ø–µ—Å–Ω–∏'],
        [f'üîç –†–µ–∂–∏–º Gemini: {mode_text}']
    ], resize_keyboard=True)

    await update.message.reply_text(
        f"–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ Gemini {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}. "
        f"{'–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é AI' if new_mode else '–¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫'}.",
        reply_markup=keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == 'üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É':
        await menu(update, context)
    elif text == 'üéµ –í—Å–µ –ø–µ—Å–Ω–∏':
        await all_songs(update, context)
    else:
        # –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω
        await update.message.reply_text("–ò—â—É –ø–µ—Å–Ω–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
        result = await search_with_gemini(text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        await update.message.reply_text(result)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="menu")],
            [InlineKeyboardButton("üéµ –í—Å–µ –ø–µ—Å–Ω–∏", callback_data="all_songs")]
        ])
        await update.message.reply_text("–ñ–º–∏üëá:", reply_markup=keyboard)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")

    if query.data == "show_more_songs":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
        all_songs_list = sorted(SONGS.keys())
        songs_per_page = 10

        # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–≤–æ–¥–∞
        current_index = context.user_data.get('current_song_index', 0)
        next_index = current_index + songs_per_page

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
        songs_to_show = all_songs_list[current_index:next_index]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω
        keyboard_inline = [[InlineKeyboardButton(title, callback_data=f"song_{title}")] for title in songs_to_show]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ï—â–µ" –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        navigation_buttons = []
        if current_index > 0:
            navigation_buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="show_previous_songs"))
        if next_index < len(all_songs_list):
            navigation_buttons.append(InlineKeyboardButton("–ï—â–µ", callback_data="show_more_songs"))

        if navigation_buttons:
            keyboard_inline.append(navigation_buttons)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Å–Ω—è–º–∏
        await query.message.edit_text('–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω:', reply_markup=InlineKeyboardMarkup(keyboard_inline))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        context.user_data['previous_song_index'] = current_index
        context.user_data['current_song_index'] = next_index

    elif query.data == "show_previous_songs":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
        all_songs_list = sorted(SONGS.keys())
        songs_per_page = 10

        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        previous_index = context.user_data.get('previous_song_index', 0)
        current_index = max(previous_index - songs_per_page, 0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º 0
        next_index = previous_index

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞
        songs_to_show = all_songs_list[current_index:next_index]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–µ—Å–µ–Ω
        keyboard_inline = [[InlineKeyboardButton(title, callback_data=f"song_{title}")] for title in songs_to_show]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ï—â–µ" –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        navigation_buttons = []
        if current_index > 0:
            navigation_buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="show_previous_songs"))
        if next_index < len(all_songs_list):
            navigation_buttons.append(InlineKeyboardButton("–ï—â–µ", callback_data="show_more_songs"))

        if navigation_buttons:
            keyboard_inline.append(navigation_buttons)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Å–Ω—è–º–∏
        await query.message.edit_text('–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω:', reply_markup=InlineKeyboardMarkup(keyboard_inline))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        context.user_data['current_song_index'] = next_index
        context.user_data['previous_song_index'] = current_index

    elif query.data.startswith("letter_"):
        letter = query.data.split("_")[1]
        keyboard = create_songs_keyboard(letter)
        await query.edit_message_text(text=f"–ü–µ—Å–Ω–∏ –Ω–∞ –±—É–∫–≤—É {letter}:", reply_markup=keyboard)
    elif query.data.startswith("song_") or query.data.startswith("gpt_song_"):
        if query.data.startswith("gpt_song_"):
            title = query.data[9:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "gpt_song_"
        else:
            title = query.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "song_"

        lyrics = SONGS.get(title, "–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–µ—Å–Ω–∏
        await query.message.reply_text(lyrics)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await query.message.reply_document(document=open(f'songs/{title}.docx', 'rb'))
        except FileNotFoundError:
            await query.message.reply_text(f"–§–∞–π–ª {title}.docx –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ê–∫–∫–æ—Ä–¥—ã", "–ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", "–í—Å–µ –ø–µ—Å–Ω–∏" –∏ "–ù–∞–π—Ç–∏ —Å—Ç–∏—Ö –∏–∑ –ë–∏–±–ª–∏–∏ –∫ –ø–µ—Å–Ω–µ"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé∏ –ê–∫–∫–æ—Ä–¥—ã", callback_data=f"chords_{title}")],
            [InlineKeyboardButton("üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="menu")],
            [InlineKeyboardButton("üéµ –í—Å–µ –ø–µ—Å–Ω–∏", callback_data="all_songs")],
            [InlineKeyboardButton("üìñ –ù–∞–π—Ç–∏ —Å—Ç–∏—Ö –∏–∑ –ë–∏–±–ª–∏–∏ –∫ –ø–µ—Å–Ω–µ", callback_data=f"bible_{title}")]
        ])
        await query.message.reply_text("–ñ–º–∏üëá:", reply_markup=keyboard)
    elif query.data.startswith("chords_"):
        title = query.data[7:]
        chord_file = CHORDS.get(title)

        if chord_file:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
                await query.message.reply_document(document=open(chord_file, 'rb'))
            except FileNotFoundError:
                await query.message.reply_text(f"–§–∞–π–ª —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏ {title}.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await query.message.reply_text("–ê–∫–∫–æ—Ä–¥—ã –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="menu")],
            [InlineKeyboardButton("üéµ –í—Å–µ –ø–µ—Å–Ω–∏", callback_data="all_songs")]
        ])
        await query.message.reply_text("–ñ–º–∏üëá:", reply_markup=keyboard)
    elif query.data.startswith("bible_"):
        title = query.data[6:]
        lyrics = SONGS.get(title, "–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –¥—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç–∏—Ö –∏–∑ –ë–∏–±–ª–∏–∏
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        spiritual_guidance, bible_verse = await get_spiritual_guidance_and_bible_verse(title, lyrics)

        await query.message.reply_text(f"**–î—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:**\n\n{spiritual_guidance}")
        await query.message.reply_text(f"**–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏—Ö –∏–∑ –ë–∏–±–ª–∏–∏:**\n\n{bible_verse}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ê–∫–∫–æ—Ä–¥—ã", "–ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É" –∏ "–í—Å–µ –ø–µ—Å–Ω–∏"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé∏ –ê–∫–∫–æ—Ä–¥—ã", callback_data=f"chords_{title}")],
            [InlineKeyboardButton("üìö –ë–∞–∑–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="menu")],
            [InlineKeyboardButton("üéµ –í—Å–µ –ø–µ—Å–Ω–∏", callback_data="all_songs")]
        ])
        await query.message.reply_text("–ñ–º–∏üëá:", reply_markup=keyboard)
    elif query.data == "menu":
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ menu –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é"
        await menu(update, context)
    elif query.data == "all_songs":
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ all_songs –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ –ø–µ—Å–Ω–∏"
        await all_songs(query.message, context)


async def get_spiritual_guidance_and_bible_verse(song_title, lyrics):
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')

        prompt = (f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{song_title}' –∏ —Ç–µ–∫—Å—Ç–æ–º:\n\n{lyrics}\n\n"
                  f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–≤–µ –∑–∞–¥–∞—á–∏:\n"
                  f"1. –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏—Ö –∏–∑ –ë–∏–±–ª–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ —ç—Ç–æ–π –ø–µ—Å–Ω–∏\n"
                  f"2. –ù–∞–ø–∏—à–∏—Ç–µ –¥—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –≥–ª—É–±–æ–∫–∏—Ö –±–æ–≥–æ—Å–ª–æ–≤—Å–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π\n\n"
                  f"–†–∞–∑–¥–µ–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ –¥—É—Ö–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –±–∏–±–ª–µ–π—Å–∫–∏–π —Å—Ç–∏—Ö.")

        response = model.generate_content(prompt)

        # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        parts = response.text.split('\n\n', 1)

        if len(parts) == 2:
            guidance, verse = parts
        else:
            guidance = parts[0]
            verse = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏—Ö."

        return guidance, verse
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini API: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è.", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏—Ö–∞ –∏–∑ –ë–∏–±–ª–∏–∏."


def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    token = os.getenv("BOT_TOKEN")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("all_songs", all_songs))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()